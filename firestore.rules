rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // User profiles - users can only read/write their own profile
    match /users/{userId} {
      allow read: if request.auth != null && request.auth.uid == userId;
      allow write: if request.auth != null 
        && request.auth.uid == userId
        && (!request.resource.data.keys().hasAny(['subscriptionStatus']) 
          || request.resource.data.subscriptionStatus in ['free', 'creator', 'premium', 'trial'])
        && (!request.resource.data.keys().hasAny(['coverGenerationsUsed']) 
          || request.resource.data.coverGenerationsUsed is int)
        && (!request.resource.data.keys().hasAny(['lastCoverGenerationReset']) 
          || request.resource.data.lastCoverGenerationReset is timestamp);
    }
    
    // User projects - users can only access their own projects
    match /users/{userId}/projects/{projectId} {
      allow read, write, delete: if request.auth != null && request.auth.uid == userId;
      
      // Allow listing all projects for the user
      allow list: if request.auth != null && request.auth.uid == userId;
    }
    
    // Usage tracking - users can only read/write their own usage data
    match /usage/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Content snippets - users can only read/write their own snippets
    match /snippets/{snippetId} {
      allow read, write, delete: if request.auth != null && request.resource.data.userId == request.auth.uid || resource.data.userId == request.auth.uid;
    }
    
    // Deny all other access by default
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
